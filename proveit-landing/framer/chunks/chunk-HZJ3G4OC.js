// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project d37f32ec1bb98c5f "ProveIt (Ver 404)", do not edit manually */
import {
  Icon
} from "./chunk-IXDMRUES.js";

// /:https://framerusercontent.com/modules/fK9FMfhE1qCjocadz0qe/Rkxapa3PETQshNiDvt3Z/hzCEfQwIw.js
import { jsx as _jsx } from "react/jsx-runtime";
import { addFonts, addPropertyControls, ComponentViewportProvider, ControlType, cx, getFonts, getPropertyControls, Link, useComponentViewport, useLocaleInfo, useVariantState, withCSS } from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
var PhosphorFonts = getFonts(Icon);
var PhosphorControls = getPropertyControls(Icon);
var enabledGestures = { Xb28g_s5s: { hover: true } };
var serializationHash = "framer-RRrE1";
var variantClassNames = { Xb28g_s5s: "framer-v-kew4vc" };
function addPropertyOverrides(overrides, ...variants) {
  const nextOverrides = {};
  variants === null || variants === void 0 ? void 0 : variants.forEach((variant) => variant && Object.assign(nextOverrides, overrides[variant]));
  return nextOverrides;
}
var transition1 = { damping: 30, delay: 0, mass: 1, stiffness: 161, type: "spring" };
var Transition = ({ value, children }) => {
  const config = React.useContext(MotionConfigContext);
  const transition = value !== null && value !== void 0 ? value : config.transition;
  const contextValue = React.useMemo(() => ({ ...config, transition }), [JSON.stringify(transition)]);
  return /* @__PURE__ */ _jsx(MotionConfigContext.Provider, { value: contextValue, children });
};
var Variants = motion(React.Fragment);
var getProps = ({ height, id, link, name1, width, ...props }) => {
  var _ref;
  return { ...props, RaaUYVCmu: (_ref = name1 !== null && name1 !== void 0 ? name1 : props.RaaUYVCmu) !== null && _ref !== void 0 ? _ref : "LinkedinLogo", XBkzx9X2N: link !== null && link !== void 0 ? link : props.XBkzx9X2N };
};
var createLayoutDependency = (props, variants) => {
  if (props.layoutDependency) return variants.join("-") + props.layoutDependency;
  return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function(props, ref) {
  const { activeLocale, setLocale } = useLocaleInfo();
  const { style, className, layoutId, variant, RaaUYVCmu, XBkzx9X2N, ...restProps } = getProps(props);
  const { baseVariant, classNames, clearLoadingGesture, gestureHandlers, gestureVariant, isLoading, setGestureState, setVariant, variants } = useVariantState({ defaultVariant: "Xb28g_s5s", enabledGestures, variant, variantClassNames });
  const layoutDependency = createLayoutDependency(props, variants);
  const ref1 = React.useRef(null);
  const defaultLayoutId = React.useId();
  const sharedStyleClassNames = [];
  const componentViewport = useComponentViewport();
  return /* @__PURE__ */ _jsx(LayoutGroup, { id: layoutId !== null && layoutId !== void 0 ? layoutId : defaultLayoutId, children: /* @__PURE__ */ _jsx(Variants, { animate: variants, initial: false, children: /* @__PURE__ */ _jsx(Transition, { value: transition1, children: /* @__PURE__ */ _jsx(Link, { href: XBkzx9X2N, children: /* @__PURE__ */ _jsx(motion.a, { ...restProps, ...gestureHandlers, className: `${cx(serializationHash, ...sharedStyleClassNames, "framer-kew4vc", className, classNames)} framer-i2i703`, "data-framer-name": "Variant 1", layoutDependency, layoutId: "Xb28g_s5s", ref: ref !== null && ref !== void 0 ? ref : ref1, style: { backgroundColor: "var(--token-8870a9c4-2a9d-46c2-84fc-3470fbec519e, rgba(0, 0, 0, 0.05))", borderBottomLeftRadius: 5, borderBottomRightRadius: 5, borderTopLeftRadius: 5, borderTopRightRadius: 5, ...style }, variants: { "Xb28g_s5s-hover": { backgroundColor: "var(--token-6486a9ac-e9e8-4ced-becb-afb4c654ba35, rgb(10, 10, 10))" } }, ...addPropertyOverrides({ "Xb28g_s5s-hover": { "data-framer-name": void 0 } }, baseVariant, gestureVariant), children: /* @__PURE__ */ _jsx(ComponentViewportProvider, { children: /* @__PURE__ */ _jsx(motion.div, { className: "framer-2opffg-container", layoutDependency, layoutId: "kZ8OCYhHN-container", children: /* @__PURE__ */ _jsx(Icon, { color: "var(--token-6486a9ac-e9e8-4ced-becb-afb4c654ba35, rgb(10, 10, 10))", height: "100%", iconSearch: "House", iconSelection: RaaUYVCmu, id: "kZ8OCYhHN", layoutId: "kZ8OCYhHN", mirrored: false, selectByList: true, style: { height: "100%", width: "100%" }, weight: "fill", width: "100%", ...addPropertyOverrides({ "Xb28g_s5s-hover": { color: "var(--token-9f0badbf-8d74-41b8-a73a-e1a6bdec487b, rgb(194, 250, 105))", weight: "duotone" } }, baseVariant, gestureVariant) }) }) }) }) }) }) }) });
});
var css = ["@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }", ".framer-RRrE1.framer-i2i703, .framer-RRrE1 .framer-i2i703 { display: block; }", ".framer-RRrE1.framer-kew4vc { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: 30px; justify-content: center; overflow: visible; padding: 1px; position: relative; text-decoration: none; width: 30px; }", ".framer-RRrE1 .framer-2opffg-container { flex: 1 0 0px; height: 100%; position: relative; width: 1px; }", "@supports (background: -webkit-named-image(i)) and (not (font-palette:dark)) { .framer-RRrE1.framer-kew4vc { gap: 0px; } .framer-RRrE1.framer-kew4vc > * { margin: 0px; margin-left: calc(10px / 2); margin-right: calc(10px / 2); } .framer-RRrE1.framer-kew4vc > :first-child { margin-left: 0px; } .framer-RRrE1.framer-kew4vc > :last-child { margin-right: 0px; } }", ".framer-RRrE1.framer-v-kew4vc.hover.framer-kew4vc { padding: 6px; }"];
var FramerhzCEfQwIw = withCSS(Component, css, "framer-RRrE1");
var stdin_default = FramerhzCEfQwIw;
FramerhzCEfQwIw.displayName = "Component / Team - Icon";
FramerhzCEfQwIw.defaultProps = { height: 30, width: 30 };
addPropertyControls(FramerhzCEfQwIw, { RaaUYVCmu: (PhosphorControls === null || PhosphorControls === void 0 ? void 0 : PhosphorControls["iconSelection"]) && { ...PhosphorControls["iconSelection"], defaultValue: "LinkedinLogo", description: void 0, hidden: void 0, title: "Name" }, XBkzx9X2N: { title: "Link", type: ControlType.Link } });
addFonts(FramerhzCEfQwIw, [{ explicitInter: true, fonts: [] }, ...PhosphorFonts], { supportsExplicitInterCodegen: true });

export {
  stdin_default
};
